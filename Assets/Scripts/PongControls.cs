//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.1
//     from Assets/Scripts/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PongControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PongControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Player 1"",
            ""id"": ""92870d58-95c9-450b-9e68-029e70bf9032"",
            ""actions"": [
                {
                    ""name"": ""Move up"",
                    ""type"": ""Button"",
                    ""id"": ""113934a2-e51c-4a1a-a6c6-687967979c4f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move down"",
                    ""type"": ""Button"",
                    ""id"": ""5d2b03c3-087d-4b85-a1c6-b1d1a4d4ee89"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7858cd2f-3721-4ff4-8fb5-97a13af0517f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ceffaee1-46e8-45cb-83cb-59df90f827c7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player 2"",
            ""id"": ""fe86b3b6-2a5f-49d7-b92a-2883db504a81"",
            ""actions"": [
                {
                    ""name"": ""Move up"",
                    ""type"": ""Button"",
                    ""id"": ""6e8de506-c9b5-4f66-b0fc-164386075870"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move down"",
                    ""type"": ""Button"",
                    ""id"": ""20ce434f-defc-4171-8bb7-ad978a219ca2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8154bfae-9dcc-4a08-9fce-a92fac3ef7a7"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c08d7ad9-e6b7-454c-9c42-225eb1e59a70"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Pong"",
            ""bindingGroup"": ""Pong"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player 1
        m_Player1 = asset.FindActionMap("Player 1", throwIfNotFound: true);
        m_Player1_Moveup = m_Player1.FindAction("Move up", throwIfNotFound: true);
        m_Player1_Movedown = m_Player1.FindAction("Move down", throwIfNotFound: true);
        // Player 2
        m_Player2 = asset.FindActionMap("Player 2", throwIfNotFound: true);
        m_Player2_Moveup = m_Player2.FindAction("Move up", throwIfNotFound: true);
        m_Player2_Movedown = m_Player2.FindAction("Move down", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player 1
    private readonly InputActionMap m_Player1;
    private IPlayer1Actions m_Player1ActionsCallbackInterface;
    private readonly InputAction m_Player1_Moveup;
    private readonly InputAction m_Player1_Movedown;
    public struct Player1Actions
    {
        private @PongControls m_Wrapper;
        public Player1Actions(@PongControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moveup => m_Wrapper.m_Player1_Moveup;
        public InputAction @Movedown => m_Wrapper.m_Player1_Movedown;
        public InputActionMap Get() { return m_Wrapper.m_Player1; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player1Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer1Actions instance)
        {
            if (m_Wrapper.m_Player1ActionsCallbackInterface != null)
            {
                @Moveup.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMoveup;
                @Moveup.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMoveup;
                @Moveup.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMoveup;
                @Movedown.started -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMovedown;
                @Movedown.performed -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMovedown;
                @Movedown.canceled -= m_Wrapper.m_Player1ActionsCallbackInterface.OnMovedown;
            }
            m_Wrapper.m_Player1ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moveup.started += instance.OnMoveup;
                @Moveup.performed += instance.OnMoveup;
                @Moveup.canceled += instance.OnMoveup;
                @Movedown.started += instance.OnMovedown;
                @Movedown.performed += instance.OnMovedown;
                @Movedown.canceled += instance.OnMovedown;
            }
        }
    }
    public Player1Actions @Player1 => new Player1Actions(this);

    // Player 2
    private readonly InputActionMap m_Player2;
    private IPlayer2Actions m_Player2ActionsCallbackInterface;
    private readonly InputAction m_Player2_Moveup;
    private readonly InputAction m_Player2_Movedown;
    public struct Player2Actions
    {
        private @PongControls m_Wrapper;
        public Player2Actions(@PongControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Moveup => m_Wrapper.m_Player2_Moveup;
        public InputAction @Movedown => m_Wrapper.m_Player2_Movedown;
        public InputActionMap Get() { return m_Wrapper.m_Player2; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Player2Actions set) { return set.Get(); }
        public void SetCallbacks(IPlayer2Actions instance)
        {
            if (m_Wrapper.m_Player2ActionsCallbackInterface != null)
            {
                @Moveup.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMoveup;
                @Moveup.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMoveup;
                @Moveup.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMoveup;
                @Movedown.started -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovedown;
                @Movedown.performed -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovedown;
                @Movedown.canceled -= m_Wrapper.m_Player2ActionsCallbackInterface.OnMovedown;
            }
            m_Wrapper.m_Player2ActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Moveup.started += instance.OnMoveup;
                @Moveup.performed += instance.OnMoveup;
                @Moveup.canceled += instance.OnMoveup;
                @Movedown.started += instance.OnMovedown;
                @Movedown.performed += instance.OnMovedown;
                @Movedown.canceled += instance.OnMovedown;
            }
        }
    }
    public Player2Actions @Player2 => new Player2Actions(this);
    private int m_PongSchemeIndex = -1;
    public InputControlScheme PongScheme
    {
        get
        {
            if (m_PongSchemeIndex == -1) m_PongSchemeIndex = asset.FindControlSchemeIndex("Pong");
            return asset.controlSchemes[m_PongSchemeIndex];
        }
    }
    public interface IPlayer1Actions
    {
        void OnMoveup(InputAction.CallbackContext context);
        void OnMovedown(InputAction.CallbackContext context);
    }
    public interface IPlayer2Actions
    {
        void OnMoveup(InputAction.CallbackContext context);
        void OnMovedown(InputAction.CallbackContext context);
    }
}
